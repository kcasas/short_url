#!/bin/sh
ensure_docker_ip()
{
    cat .env | grep DOCKER_MACHINE_IP || echo "\nDOCKER_MACHINE_IP=$(docker-machine ip)" >> .env;
}

case $1 in
install_docker)
    hash brew || /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    brew cask install docker-toolbox

    break;;
bm | build_machine)
    docker-machine create default
    ensure_docker_ip
    cat << EOF > .resolver
nameserver $(docker-machine ip)
port 53
EOF
    break;;
lr | load_resolver) 
    mv .resolver /etc/resolver/kc
    break;;
bi | build_image)
    docker build --tag short_url:dev .
    
    break;;
start)
    docker-compose up -d db # start db first
    docker-compose up -d --remove-orphans
    
    break;;
stop)
    docker-compose down
    
    break;;
logs)
    docker-compose logs -f
    
    break;;
flush_dns)
    sudo killall -TERM mDNSResponder
    break;;
app | db | dns | nginx-proxy | lbapp)
case $2 in
    shell)
        docker-compose exec $1 /bin/bash
       
        break;;
    logs)
        docker-compose logs -f $1

        break;;
    *)
cat << EndOfMessage
    Dev Service Tool
        commands:
            {service} shell    "opens a shell on the container"
            {service} logs     "show logs of service"
EndOfMessage
    ;;
    esac;;
*)
cat << EndOfMessage
    Dev Tool
        commands:
            install_docker     "install docker-toolbox"
            bm | build_machine "builds the docker machine with name default"
            bi | build_image   "build the app image"
            lr | load_resolver "copies the resolver config into the host machine, needs to run with sudo priviliges"
            flush_dns          "deletes dns cache, run this when local domains take too long to resolve" 
            start              "starts all the services"
            stop               "stops all the services"
            logs               "show all logs"
        
        service commands: app | db | dns | nginx-proxy
            {service} shell    "opens a shell on the container"
            {service} logs     "show logs of service"
EndOfMessage
    ;;
esac